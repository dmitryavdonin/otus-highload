#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL –∏ Redis UDF
"""

import json
import sys
from pathlib import Path

def load_metrics(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ {file_path}")
        return None

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 1:
        return f"{seconds*1000:.1f}ms"
    else:
        return f"{seconds:.3f}s"

def calculate_improvement(old_value, new_value):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
    if old_value == 0:
        return 0
    improvement = ((old_value - new_value) / old_value) * 100
    return improvement

def compare_metrics(postgres_data, redis_data):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    print(f"üìä PostgreSQL: {postgres_data['test_config']}")
    print(f"üìä Redis UDF:  {redis_data['test_config']}")
    print()
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    operations = [
        ('user_registration', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        ('user_login', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        ('friend_addition', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π'),
        ('message_send', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π'),
        ('message_list', '–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π')
    ]
    
    print("üìà –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
    print("-" * 60)
    
    for op_key, op_name in operations:
        if op_key in postgres_data['metrics'] and op_key in redis_data['metrics']:
            pg_metrics = postgres_data['metrics'][op_key]
            redis_metrics = redis_data['metrics'][op_key]
            
            print(f"\nüîß {op_name}:")
            print(f"   PostgreSQL: {format_time(pg_metrics['avg'])} (—Å—Ä–µ–¥–Ω–µ–µ)")
            print(f"   Redis UDF:  {format_time(redis_metrics['avg'])} (—Å—Ä–µ–¥–Ω–µ–µ)")
            
            improvement = calculate_improvement(pg_metrics['avg'], redis_metrics['avg'])
            if improvement > 0:
                print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}% (Redis UDF –±—ã—Å—Ç—Ä–µ–µ)")
            elif improvement < 0:
                print(f"   ‚ùå –£—Ö—É–¥—à–µ–Ω–∏–µ: {abs(improvement):.1f}% (PostgreSQL –±—ã—Å—Ç—Ä–µ–µ)")
            else:
                print(f"   ‚ûñ –û–¥–∏–Ω–∞–∫–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            
            # –û–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É
            print(f"   PostgreSQL: {pg_metrics['ops_per_second']:.1f} ops/sec")
            print(f"   Redis UDF:  {redis_metrics['ops_per_second']:.1f} ops/sec")
            
            ops_improvement = calculate_improvement(1/pg_metrics['ops_per_second'], 1/redis_metrics['ops_per_second'])
            if ops_improvement > 0:
                print(f"   üìà –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: +{ops_improvement:.1f}%")
    
    print("\n" + "=" * 60)
    print("üìä –û–ë–©–ò–ï –í–´–í–û–î–´:")
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π
    total_improvements = 0
    total_operations = 0
    
    for op_key, _ in operations:
        if op_key in postgres_data['metrics'] and op_key in redis_data['metrics']:
            pg_avg = postgres_data['metrics'][op_key]['avg']
            redis_avg = redis_data['metrics'][op_key]['avg']
            improvement = calculate_improvement(pg_avg, redis_avg)
            total_improvements += improvement
            total_operations += 1
    
    if total_operations > 0:
        avg_improvement = total_improvements / total_operations
        if avg_improvement > 0:
            print(f"‚úÖ Redis UDF –≤ —Å—Ä–µ–¥–Ω–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {avg_improvement:.1f}%")
        else:
            print(f"‚ùå PostgreSQL –≤ —Å—Ä–µ–¥–Ω–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {abs(avg_improvement):.1f}%")
    
    print("=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –º–µ—Ç—Ä–∏–∫
    postgres_file = Path("lesson-07/dialog_metrics_postgresql.json")
    redis_file = Path("lesson-07/dialog_metrics_redis_udf.json")
    
    print("üöÄ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: PostgreSQL vs Redis UDF")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    postgres_data = load_metrics(postgres_file)
    redis_data = load_metrics(redis_file)
    
    if not postgres_data or not redis_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        sys.exit(1)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    compare_metrics(postgres_data, redis_data)

if __name__ == "__main__":
    main() 
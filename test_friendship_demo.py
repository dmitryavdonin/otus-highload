#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
—á–µ—Ä–µ–∑ WebSocket - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç–∞—Ö.
"""

import asyncio
import json
import logging
import websockets
import aiohttp
import time
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBSOCKET_URL = "ws://localhost:8001"
HTTP_URL = "http://localhost:8001"

class User:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: str, name: str):
        self.user_id = user_id
        self.name = name
        self.websocket = None
        self.connected = False
        self.messages_received = []
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            uri = f"{WEBSOCKET_URL}/ws/{self.user_id}?token={self.user_id}:test_signature"
            logger.info(f"üë§ {self.name} –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket...")
            
            self.websocket = await websockets.connect(uri)
            self.connected = True
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = await self.websocket.recv()
            welcome_data = json.loads(welcome_msg)
            logger.info(f"‚úÖ {self.name} –ø–æ–¥–∫–ª—é—á–µ–Ω! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {welcome_data.get('data', {}).get('message', 'N/A')}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.name}: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.websocket and self.connected:
            await self.websocket.close()
            self.connected = False
            logger.info(f"üëã {self.name} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç WebSocket")
    
    async def send_message(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
        if self.websocket and self.connected:
            await self.websocket.send(json.dumps(message))
    
    async def listen_for_messages(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            while self.connected and self.websocket:
                try:
                    message = await asyncio.wait_for(self.websocket.recv(), timeout=1.0)
                    data = json.loads(message)
                    self.messages_received.append(data)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    msg_type = data.get('type')
                    msg_data = data.get('data', {})
                    
                    if msg_type == 'feed_update':
                        post_data = msg_data.get('post', {})
                        author = post_data.get('author_user_id', 'Unknown')
                        text = post_data.get('post_text', 'No text')
                        logger.info(f"üì¢ {self.name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–µ –æ—Ç {author}: '{text}'")
                        
                    elif msg_type == 'friendship_update':
                        friend_id = msg_data.get('friend_user_id', 'Unknown')
                        action = msg_data.get('action', 'unknown')
                        logger.info(f"üë• {self.name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—Ä—É–∂–±–µ: {action} —Å {friend_id}")
                        
                    elif msg_type == 'system':
                        message_text = msg_data.get('message', '')
                        if message_text not in ['pong', 'subscribed_to_feed']:
                            logger.info(f"üîß {self.name} –ø–æ–ª—É—á–∏–ª —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
                    
                except asyncio.TimeoutError:
                    continue
                except websockets.exceptions.ConnectionClosed:
                    logger.info(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {self.name} –∑–∞–∫—Ä—ã—Ç–æ")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {self.name}: {e}")
                    break
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π {self.name}: {e}")

async def add_friendship(user1_id: str, user2_id: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∂–±—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ HTTP API"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è —á–µ—Ä–µ–∑ RabbitMQ
        friendship_event = {
            "event_type": "friendship_created",
            "user_id": user1_id,
            "friend_user_id": user2_id,
            "created_at": datetime.now().isoformat()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π endpoint
        async with aiohttp.ClientSession() as session:
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥—Ä—É–∂–±—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.post(
                f"{HTTP_URL}/test-friendship",
                json=friendship_event
            ) as response:
                if response.status == 200:
                    logger.info(f"üë• –î—Ä—É–∂–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user1_id} ‚Üî {user2_id}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∂–±—ã: {response.status}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–∂–±—ã: {e}")
        return False

async def create_post(author_id: str, post_text: str, post_id: str = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ HTTP API"""
    try:
        if not post_id:
            post_id = f"post_{int(time.time())}"
            
        async with aiohttp.ClientSession() as session:
            params = {
                "post_id": post_id,
                "author_user_id": author_id,
                "post_text": post_text
            }
            
            async with session.post(f"{HTTP_URL}/test-post", params=params) as response:
                if response.status == 200:
                    logger.info(f"üìù –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: {author_id} –Ω–∞–ø–∏—Å–∞–ª '{post_text}'")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {response.status}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return False

async def check_server_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{HTTP_URL}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"üè• –°–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤: {data.get('status', 'unknown')}")
                    return True
                else:
                    logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–∑–¥–æ—Ä–æ–≤: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    if not await check_server_health():
        logger.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    alice = User("alice_123", "–ê–ª–∏—Å–∞")
    bob = User("bob_456", "–ë–æ–±")
    
    try:
        # –≠—Ç–∞–ø 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("\nüîå –≠—Ç–∞–ø 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ WebSocket")
        logger.info("-" * 40)
        
        alice_connected = await alice.connect()
        bob_connected = await bob.connect()
        
        if not (alice_connected and bob_connected):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        alice_listener = asyncio.create_task(alice.listen_for_messages())
        bob_listener = asyncio.create_task(bob.listen_for_messages())
        
        await asyncio.sleep(2)
        
        # –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è
        logger.info("\nüë• –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è")
        logger.info("-" * 40)
        
        # –ê–ª–∏—Å–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –ë–æ–±–∞ –≤ –¥—Ä—É–∑—å—è
        await add_friendship("alice_123", "bob_456")
        await asyncio.sleep(2)
        
        # –ë–æ–± –¥–æ–±–∞–≤–ª—è–µ—Ç –ê–ª–∏—Å—É –≤ –¥—Ä—É–∑—å—è (–≤–∑–∞–∏–º–Ω–∞—è –¥—Ä—É–∂–±–∞)
        await add_friendship("bob_456", "alice_123")
        await asyncio.sleep(2)
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        logger.info("\nüìù –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        logger.info("-" * 40)
        
        # –ê–ª–∏—Å–∞ —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç
        await create_post("alice_123", "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç üéâ")
        await asyncio.sleep(3)
        
        # –ë–æ–± —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç
        await create_post("bob_456", "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è! ‚òÄÔ∏è")
        await asyncio.sleep(3)
        
        # –ê–ª–∏—Å–∞ —Å–æ–∑–¥–∞–µ—Ç –µ—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç
        await create_post("alice_123", "–ò–∑—É—á–∞—é WebSocket —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üíª")
        await asyncio.sleep(3)
        
        # –ë–æ–± –æ—Ç–≤–µ—á–∞–µ—Ç
        await create_post("bob_456", "WebSocket —ç—Ç–æ –∫—Ä—É—Ç–æ! –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è üöÄ")
        await asyncio.sleep(3)
        
        # –≠—Ç–∞–ø 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\nüìä –≠—Ç–∞–ø 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info("-" * 40)
        
        logger.info(f"üì¨ –ê–ª–∏—Å–∞ –ø–æ–ª—É—á–∏–ª–∞ {len(alice.messages_received)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info(f"üì¨ –ë–æ–± –ø–æ–ª—É—á–∏–ª {len(bob.messages_received)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, msg in enumerate(alice.messages_received[-3:], 1):
            msg_type = msg.get('type', 'unknown')
            logger.info(f"  üì® –ê–ª–∏—Å–∞ #{i}: {msg_type}")
            
        for i, msg in enumerate(bob.messages_received[-3:], 1):
            msg_type = msg.get('type', 'unknown')
            logger.info(f"  üì® –ë–æ–± #{i}: {msg_type}")
        
        logger.info("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("\nüëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        if 'alice_listener' in locals():
            alice_listener.cancel()
        if 'bob_listener' in locals():
            bob_listener.cancel()
            
        await alice.disconnect()
        await bob.disconnect()
        
        logger.info("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 
"""
Redis –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF (User Defined Functions)
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ Redis
"""

import json
import uuid
import traceback
from datetime import datetime
from typing import List, Dict, Optional
import redis.asyncio as redis
from packages.common.models import DialogMessageResponse


class RedisDialogAdapterUDF:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ Redis —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF —Ñ—É–Ω–∫—Ü–∏–π
    """
    
    def __init__(self, redis_url: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        
        Args:
            redis_url: URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        """
        print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis UDF –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å URL: {redis_url}")
        self.redis_url = redis_url
        self.redis_client = None
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {self.redis_url}")
        self.redis_client = redis.from_url(self.redis_url, decode_responses=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await self.redis_client.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ UDF —Ñ—É–Ω–∫—Ü–∏–π
        await self._verify_udf_functions()
        
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self.redis_client:
            await self.redis_client.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def _verify_udf_functions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è UDF —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            functions = await self.redis_client.function_list()
            print(f"üîç –û—Ç–ª–∞–¥–∫–∞: function_list() –≤–µ—Ä–Ω—É–ª: {functions}")
            
            if not functions:
                raise Exception("UDF —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Redis")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            required_functions = [
                'save_message', 'get_messages', 'get_recent_messages',
                'get_message_count', 'get_dialog_stats', 'delete_dialog'
            ]
            
            loaded_functions = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç function_list
            # –§–æ—Ä–º–∞—Ç: [['library_name', 'dialog_functions', 'engine', 'LUA', 'functions', [—Ñ—É–Ω–∫—Ü–∏–∏...]]]
            if isinstance(functions, list) and len(functions) > 0:
                for lib_data in functions:
                    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {lib_data}")
                    if isinstance(lib_data, list) and len(lib_data) >= 6:
                        # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å 'functions' –≤ —Å–ø–∏—Å–∫–µ
                        try:
                            functions_index = lib_data.index('functions')
                            if functions_index + 1 < len(lib_data):
                                functions_list = lib_data[functions_index + 1]
                                print(f"üîç –û—Ç–ª–∞–¥–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π: {functions_list}")
                                
                                if isinstance(functions_list, list):
                                    for func_data in functions_list:
                                        if isinstance(func_data, list) and len(func_data) >= 2:
                                            # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å 'name' –≤ —Å–ø–∏—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏
                                            try:
                                                name_index = func_data.index('name')
                                                if name_index + 1 < len(func_data):
                                                    func_name = func_data[name_index + 1]
                                                    loaded_functions.append(func_name)
                                                    print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_name}")
                                            except ValueError:
                                                continue
                        except ValueError:
                            continue
            
            print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {loaded_functions}")
            
            missing_functions = [f for f in required_functions if f not in loaded_functions]
            if missing_functions:
                raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç UDF —Ñ—É–Ω–∫—Ü–∏–∏: {missing_functions}")
                
            print(f"‚úÖ UDF —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {loaded_functions}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ UDF —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            import traceback
            print(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            raise
    
    def _get_dialog_key(self, user_id1: str, user_id2: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–∏–∞–ª–æ–≥–∞. –í—Å–µ–≥–¥–∞ –≤ –æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–ª—é—á –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dialog:{smaller_id}:{larger_id}
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UUID –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ PostgreSQL
        id1_str = str(user_id1)
        id2_str = str(user_id2)
        
        print(f"üîç DEBUG: _get_dialog_key –≤—ã–∑–≤–∞–Ω —Å user_id1={user_id1} (—Ç–∏–ø: {type(user_id1)}), user_id2={user_id2} (—Ç–∏–ø: {type(user_id2)})")
        print(f"üîç DEBUG: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫–∏: id1_str={id1_str}, id2_str={id2_str}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º ID –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π
        ids = sorted([id1_str, id2_str])
        dialog_key = f"dialog:{ids[0]}:{ids[1]}"
        
        print(f"üîç DEBUG: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–∏–∞–ª–æ–≥–∞: {dialog_key}")
        return dialog_key
    
    def _message_to_dict(self, message_id: str, from_user_id: str, to_user_id: str, 
                        text: str, created_at: datetime) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis"""
        return {
            "id": message_id,
            "from_user_id": from_user_id,
            "to_user_id": to_user_id,
            "text": text,
            "created_at": created_at.isoformat()
        }
    
    def _dict_to_message_response(self, message_dict: Dict) -> DialogMessageResponse:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–∑ Redis –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞"""
        return DialogMessageResponse(
            from_user_id=message_dict["from_user_id"],
            to_user_id=message_dict["to_user_id"],
            text=message_dict["text"],
            created_at=datetime.fromisoformat(message_dict["created_at"])
        )
    
    async def save_dialog_message(self, from_user_id: str, to_user_id: str, text: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF
        
        Args:
            from_user_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            to_user_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        message_id = str(uuid.uuid4())
        created_at = datetime.utcnow()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = self._message_to_dict(
            message_id, from_user_id, to_user_id, text, created_at
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–∏–∞–ª–æ–≥–∞
        dialog_key = self._get_dialog_key(from_user_id, to_user_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ score –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        timestamp_score = created_at.timestamp()
        
        # –í—ã–∑—ã–≤–∞–µ–º UDF —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await self.redis_client.fcall(
            'save_message',
            1,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            dialog_key,  # –∫–ª—é—á
            json.dumps(message_data),  # –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            str(timestamp_score),  # timestamp –∫–∞–∫ score
            str(30 * 24 * 60 * 60)  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (30 –¥–Ω–µ–π)
        )
        
        return message_id
    
    async def get_dialog_messages(self, user_id1: str, user_id2: str, 
                                 limit: int = 100, offset: int = 0) -> List[DialogMessageResponse]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –∏–∑ Redis —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        
        # –í—ã–∑—ã–≤–∞–µ–º UDF —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_data = await self.redis_client.fcall(
            'get_messages',
            1,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            dialog_key,  # –∫–ª—é—á
            str(offset),  # —Å–º–µ—â–µ–Ω–∏–µ
            str(limit)   # –ª–∏–º–∏—Ç
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
        messages = []
        for message_json in messages_data:
            try:
                message_dict = json.loads(message_json)
                message_response = self._dict_to_message_response(message_dict)
                messages.append(message_response)
            except (json.JSONDecodeError, KeyError) as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        return messages
    
    async def get_dialog_messages_count(self, user_id1: str, user_id2: str) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        
        # –í—ã–∑—ã–≤–∞–µ–º UDF —Ñ—É–Ω–∫—Ü–∏—é
        count = await self.redis_client.fcall(
            'get_message_count',
            1,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            dialog_key  # –∫–ª—é—á
        )
        
        return int(count)
    
    async def get_recent_dialog_messages(self, user_id1: str, user_id2: str, 
                                       limit: int = 50) -> List[DialogMessageResponse]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        
        # –í—ã–∑—ã–≤–∞–µ–º UDF —Ñ—É–Ω–∫—Ü–∏—é
        messages_data = await self.redis_client.fcall(
            'get_recent_messages',
            1,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            dialog_key,  # –∫–ª—é—á
            str(limit)   # –ª–∏–º–∏—Ç
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã –æ—Ç–≤–µ—Ç–∞
        messages = []
        for message_json in messages_data:
            try:
                message_dict = json.loads(message_json)
                message_response = self._dict_to_message_response(message_dict)
                messages.append(message_response)
            except (json.JSONDecodeError, KeyError) as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        return messages
    
    async def delete_dialog(self, user_id1: str, user_id2: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –±—ã–ª–æ
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        
        # –í—ã–∑—ã–≤–∞–µ–º UDF —Ñ—É–Ω–∫—Ü–∏—é
        deleted_count = await self.redis_client.fcall(
            'delete_dialog',
            1,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            dialog_key  # –∫–ª—é—á
        )
        
        return int(deleted_count) > 0
    
    async def get_dialog_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º –≤ Redis —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UDF
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        # –í—ã–∑—ã–≤–∞–µ–º UDF —Ñ—É–Ω–∫—Ü–∏—é
        stats = await self.redis_client.fcall(
            'get_dialog_stats',
            0,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            'dialog:*'  # –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
        )
        
        return {
            "total_dialogs": int(stats[0]),
            "total_messages": int(stats[1]),
            "avg_messages_per_dialog": float(stats[2])
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
redis_dialog_adapter_udf = None


def get_redis_dialog_adapter_udf():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ UDF –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    global redis_dialog_adapter_udf
    print(f"üîç DEBUG: get_redis_dialog_adapter_udf() –≤—ã–∑–≤–∞–Ω")
    print(f"üîç DEBUG: –ó–Ω–∞—á–µ–Ω–∏–µ redis_dialog_adapter_udf: {redis_dialog_adapter_udf}")
    print(f"üîç DEBUG: –¢–∏–ø redis_dialog_adapter_udf: {type(redis_dialog_adapter_udf)}")
    
    if redis_dialog_adapter_udf is None:
        print(f"‚ùå DEBUG: Redis UDF adapter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        raise Exception("Redis UDF adapter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    print(f"‚úÖ DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä: {redis_dialog_adapter_udf}")
    return redis_dialog_adapter_udf


async def init_redis_adapter_udf(redis_url: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis UDF –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    print(f"üîç –û–¢–õ–ê–î–ö–ê: init_redis_adapter_udf() –≤—ã–∑–≤–∞–Ω —Å redis_url={redis_url}")
    print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
    
    global redis_dialog_adapter_udf
    print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis UDF –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å URL: {redis_url}")
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π redis_url = {redis_url}")
    print(f"üîç DEBUG: –ó–Ω–∞—á–µ–Ω–∏–µ redis_dialog_adapter_udf –î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {redis_dialog_adapter_udf}")
    
    redis_dialog_adapter_udf = RedisDialogAdapterUDF(redis_url)
    print(f"üîç DEBUG: –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞: {redis_dialog_adapter_udf}")
    
    await redis_dialog_adapter_udf.connect()
    print(f"üîç DEBUG: –ê–¥–∞–ø—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis")
    print(f"üîç DEBUG: –ó–Ω–∞—á–µ–Ω–∏–µ redis_dialog_adapter_udf –ü–û–°–õ–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {redis_dialog_adapter_udf}")
    print(f"‚úÖ Redis UDF –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å URL: {redis_url}")


async def close_redis_adapter_udf():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis UDF –∞–¥–∞–ø—Ç–µ—Ä–æ–º"""
    global redis_dialog_adapter_udf
    if redis_dialog_adapter_udf:
        await redis_dialog_adapter_udf.disconnect() 
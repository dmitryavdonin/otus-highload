version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: social_network
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования и диалогов
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dialog Service
  dialog-service:
    build: ./dialog-service
    ports:
      - "8002:8002"
    environment:
      # База данных
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/social_network
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: social_network
      DB_USER: postgres
      DB_PASSWORD: postgres
      
      # Redis
      REDIS_URL: redis://redis:6379/1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      
      # Настройки сервиса
      DIALOG_BACKEND: redis
      LOG_LEVEL: INFO
      DEBUG: "false"
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Основное монолитное приложение
  monolith:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:9000"
    environment:
      # Настройки базы данных для database.py
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_NAME: "social_network"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      
      # Настройки базы данных для config.py
      DATABASE_URL: "postgresql+asyncpg://postgres:postgres@postgres:5432/social_network"
      DATABASE_POOL_SIZE: "10"
      DATABASE_MAX_OVERFLOW: "20"
      
      # Настройки Redis
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      
      # Настройки Dialog Service
      DIALOG_SERVICE_URL: "http://dialog-service:8002"
      DIALOG_FALLBACK_ENABLED: "true"
      DIALOG_BACKEND: ${DIALOG_BACKEND:-postgresql}
      
      # Настройки приложения
      LOG_LEVEL: "INFO"
      SECRET_KEY: "your-secret-key-here"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      dialog-service:
        condition: service_healthy
    restart: unless-stopped

  # Nginx для проксирования (опционально)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - monolith
      - dialog-service
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
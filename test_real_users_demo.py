#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è
3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
4. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ WebSocket
"""

import asyncio
import websockets
import json
import requests
import time
from datetime import datetime
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:9000"
WS_BASE_URL = "ws://localhost:8001"

class UserClient:
    def __init__(self, first_name, last_name, birthdate):
        self.first_name = first_name
        self.last_name = last_name
        self.birthdate = birthdate
        self.user_id = None
        self.token = None
        self.websocket = None
        self.messages = []
        
    async def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.post(f"{API_BASE_URL}/user/register", json={
                "first_name": self.first_name,
                "second_name": self.last_name,
                "birthdate": f"{self.birthdate}T00:00:00",
                "biography": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.first_name} {self.last_name}",
                "city": "–ú–æ—Å–∫–≤–∞",
                "password": "password123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.user_id = data["id"]
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: {self.user_id}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {self.first_name}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {self.first_name}: {e}")
            return False
    
    async def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.post(f"{API_BASE_URL}/user/login", json={
                "id": self.user_id,
                "password": "password123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.token = data["token"]
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.first_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {self.first_name}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {self.first_name}: {e}")
            return False
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            uri = f"{WS_BASE_URL}/ws/{self.user_id}"
            self.websocket = await websockets.connect(uri)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self.listen_messages())
            
            logger.info(f"‚úÖ {self.first_name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.first_name} –∫ WebSocket: {e}")
            return False
    
    async def listen_messages(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            async for message in self.websocket:
                data = json.loads(message)
                data['timestamp'] = datetime.now().strftime('%H:%M:%S')
                self.messages.append(data)
                logger.info(f"üì® {self.first_name} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {data.get('type', 'unknown')}")
                
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {self.first_name} –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π {self.first_name}: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.websocket:
            await self.websocket.close()
            logger.info(f"üîå {self.first_name} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç WebSocket")

async def create_user(first_name, last_name, birthdate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserClient(first_name, last_name, birthdate)
    
    if await user.register() and await user.login():
        return user
    else:
        return None

async def add_friendship(user1, user2):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–∑—å—è"""
    try:
        # user1 –¥–æ–±–∞–≤–ª—è–µ—Ç user2 –≤ –¥—Ä—É–∑—å—è
        response = requests.put(
            f"{API_BASE_URL}/friend/set/{user2.user_id}",
            headers={"Authorization": f"Bearer {user1.token}"}
        )
        
        if response.status_code == 200:
            logger.info(f"‚úÖ {user1.first_name} –¥–æ–±–∞–≤–∏–ª {user2.first_name} –≤ –¥—Ä—É–∑—å—è")
            
            # user2 –¥–æ–±–∞–≤–ª—è–µ—Ç user1 –≤ –¥—Ä—É–∑—å—è (–≤–∑–∞–∏–º–Ω–∞—è –¥—Ä—É–∂–±–∞)
            response2 = requests.put(
                f"{API_BASE_URL}/friend/set/{user1.user_id}",
                headers={"Authorization": f"Bearer {user2.token}"}
            )
            
            if response2.status_code == 200:
                logger.info(f"‚úÖ {user2.first_name} –¥–æ–±–∞–≤–∏–ª {user1.first_name} –≤ –¥—Ä—É–∑—å—è")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è: {response2.text}")
                return False
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –¥—Ä—É–∑—å—è: {e}")
        return False

async def create_post(user, text):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/post/create",
            headers={"Authorization": f"Bearer {user.token}"},
            json={"text": text}
        )
        
        if response.status_code == 200:
            data = response.json()
            post_id = data["id"]
            logger.info(f"‚úÖ {user.first_name} —Å–æ–∑–¥–∞–ª –ø–æ—Å—Ç: {text[:50]}...")
            return post_id
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return None

async def get_user_feed(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = requests.get(
            f"{API_BASE_URL}/post/feed",
            headers={"Authorization": f"Bearer {user.token}"},
            params={"offset": 0, "limit": 10}
        )
        
        if response.status_code == 200:
            posts = response.json()
            logger.info(f"‚úÖ {user.first_name} –ø–æ–ª—É—á–∏–ª –ª–µ–Ω—Ç—É —Å {len(posts)} –ø–æ—Å—Ç–∞–º–∏")
            return posts
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–Ω—Ç—ã: {response.text}")
            return []
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–µ–Ω—Ç—ã: {e}")
        return []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    start_time = datetime.now()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1 = await create_user("–ê–ª–µ–∫—Å–µ–π", "–ü–µ—Ç—Ä–æ–≤", "1990-05-15")
        user2 = await create_user("–ú–∞—Ä–∏—è", "–ò–≤–∞–Ω–æ–≤–∞", "1992-08-22")
        
        if not user1 or not user2:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        await user1.connect()
        await user2.connect()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è
        await add_friendship(user1, user2)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã
        await create_post(user1, "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏! üéâ")
        await asyncio.sleep(2)
        
        await create_post(user2, "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è! –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ ‚òÄÔ∏è")
        await asyncio.sleep(2)
        
        await create_post(user1, "–ò–∑—É—á–∞—é –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. WebSocket - —ç—Ç–æ –∫—Ä—É—Ç–æ! üíª")
        await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
        user1_feed = await get_user_feed(user1)
        user2_feed = await get_user_feed(user2)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await asyncio.sleep(3)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await user1.disconnect()
        await user2.disconnect()
        
        end_time = datetime.now()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á–µ—Ç
        users_info = {
            user1.user_id: f"{user1.first_name} {user1.last_name}",
            user2.user_id: f"{user2.first_name} {user2.last_name}"
        }
        report_path = generate_html_report(user1, user2, user1_feed, user2_feed, start_time, end_time, users_info)
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"üìÑ HTML-–æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
        
        return report_path
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return None

def generate_html_report(user1, user2, user1_feed, user2_feed, start_time, end_time, users_info):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    duration = (end_time - start_time).total_seconds()
    
    html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #2980b9;
            margin-top: 20px;
        }}
        h3 {{
            color: #34495e;
            margin-top: 15px;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 20px;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        .note {{
            background-color: #f8f9fa;
            border-left: 4px solid #ffc107;
            padding: 10px;
            margin-bottom: 20px;
        }}
        .success {{
            background-color: #d4edda;
            border-left: 4px solid #28a745;
            padding: 10px;
            margin-bottom: 20px;
        }}
        .section {{
            margin-bottom: 30px;
        }}
        .user-section {{
            margin-bottom: 25px;
        }}
        ul {{
            margin: 10px 0;
            padding-left: 20px;
        }}
        li {{
            margin-bottom: 5px;
        }}
    </style>
</head>
<body>
    <h1>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏</h1>
    <p>–î–∞—Ç–∞: {datetime.now().strftime('%a %b %d %I:%M:%S %p MSK %Y')}</p>
    
    <div class="success">
        <p><strong>–†–ï–ó–£–õ–¨–¢–ê–¢:</strong> –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
    </div>
    
    <div class="section">
        <h2>1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <table>
            <tr>
                <th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>
                <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
            </tr>
            <tr>
                <td>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</td>
                <td>2</td>
            </tr>
            <tr>
                <td>–ü–æ—Å—Ç–æ–≤ –≤ –ª–µ–Ω—Ç–∞—Ö</td>
                <td>{len(user1_feed) + len(user2_feed)}</td>
            </tr>
            <tr>
                <td>WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ</td>
                <td>{len(user1.messages) + len(user2.messages)}</td>
            </tr>
            <tr>
                <td>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</td>
                <td>{duration:.1f} —Å–µ–∫—É–Ω–¥</td>
            </tr>
        </table>
    </div>
    
    <div class="section">
        <h2>2. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h2>
        <p>–í —Ö–æ–¥–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:</p>
        <ul>
            <li>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API</li>
            <li>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤</li>
            <li>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É</li>
            <li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–∑—å—è</li>
            <li>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤</li>
            <li>–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤ –¥—Ä—É–∑–µ–π</li>
            <li>–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket</li>
        </ul>
    </div>
    
    <div class="section">
        <h2>3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</h2>
        
        <div class="user-section">
            <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: {users_info[user1.user_id]}</h3>
            <table>
                <tr>
                    <th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>
                    <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                </tr>
                <tr>
                    <td>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</td>
                    <td>{user1.user_id}</td>
                </tr>
                <tr>
                    <td>WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ</td>
                    <td>{len(user1.messages)}</td>
                </tr>
                <tr>
                    <td>–ü–æ—Å—Ç–æ–≤ –≤ –ª–µ–Ω—Ç–µ</td>
                    <td>{len(user1_feed)}</td>
                </tr>
            </table>
            
            <h4>WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:</h4>
            <table>
                <tr>
                    <th>‚Ññ</th>
                    <th>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</th>
                    <th>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è</th>
                </tr>
                {generate_messages_table(user1.messages)}
            </table>
        </div>
        
        <div class="user-section">
            <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: {users_info[user2.user_id]}</h3>
            <table>
                <tr>
                    <th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>
                    <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                </tr>
                <tr>
                    <td>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</td>
                    <td>{user2.user_id}</td>
                </tr>
                <tr>
                    <td>WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ</td>
                    <td>{len(user2.messages)}</td>
                </tr>
                <tr>
                    <td>–ü–æ—Å—Ç–æ–≤ –≤ –ª–µ–Ω—Ç–µ</td>
                    <td>{len(user2_feed)}</td>
                </tr>
            </table>
            
            <h4>WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:</h4>
            <table>
                <tr>
                    <th>‚Ññ</th>
                    <th>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</th>
                    <th>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è</th>
                </tr>
                {generate_messages_table(user2.messages)}
            </table>
        </div>
    </div>
    
    <div class="section">
        <h2>4. –õ–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
        
        <div class="user-section">
            <h3>–õ–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {users_info[user1.user_id]}</h3>
            <table>
                <tr>
                    <th>‚Ññ</th>
                    <th>–ê–≤—Ç–æ—Ä</th>
                    <th>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</th>
                    <th>ID –ø–æ—Å—Ç–∞</th>
                </tr>
                {generate_posts_table(user1_feed, users_info)}
            </table>
        </div>
        
        <div class="user-section">
            <h3>–õ–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {users_info[user2.user_id]}</h3>
            <table>
                <tr>
                    <th>‚Ññ</th>
                    <th>–ê–≤—Ç–æ—Ä</th>
                    <th>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</th>
                    <th>ID –ø–æ—Å—Ç–∞</th>
                </tr>
                {generate_posts_table(user2_feed, users_info)}
            </table>
        </div>
    </div>
    
    <div class="section">
        <h2>5. –í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã</h2>
        <table>
            <tr>
                <th>‚Ññ</th>
                <th>–ê–≤—Ç–æ—Ä</th>
                <th>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</th>
                <th>ID –ø–æ—Å—Ç–∞</th>
            </tr>
            {generate_posts_table(user1_feed + user2_feed, users_info)}
        </table>
    </div>
    
    <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%a %b %d %I:%M:%S %p MSK %Y')}</p>
</body>
</html>"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = "lesson-06/test_report.html"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    logger.info(f"üìÑ HTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    return report_path

def generate_messages_table(messages):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not messages:
        return "<tr><td colspan='3'>–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç</td></tr>"
    
    html = ""
    for i, msg in enumerate(messages, 1):
        msg_type = msg.get('type', 'unknown')
        content = f"–¢–∏–ø: {msg_type}"
        if 'data' in msg:
            content += f", –î–∞–Ω–Ω—ã–µ: {str(msg['data'])[:50]}..."
        
        timestamp = msg.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        html += f"""
        <tr>
            <td>{i}</td>
            <td>{content}</td>
            <td>{timestamp}</td>
        </tr>
        """
    
    return html

def generate_posts_table(posts, users_info):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å—Ç–æ–≤"""
    if not posts:
        return "<tr><td colspan='4'>–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç</td></tr>"
    
    html = ""
    for i, post in enumerate(posts, 1):
        text = post.get('text', '–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        post_id = post.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        author_id = post.get('author_user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        author_name = users_info.get(author_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {author_id}')
        
        html += f"""
        <tr>
            <td>{i}</td>
            <td>{author_name}</td>
            <td>{text}</td>
            <td>{post_id}</td>
        </tr>
        """
    
    return html

if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from typing import List
from models import DialogMessageResponse


class DialogService:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É PostgreSQL –∏ Redis –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    
    def __init__(self):
        self._postgresql_adapter = None
        self._redis_adapter = None
    
    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Config –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        from config import Config
        config = Config()
        
        if config.is_redis_backend():
            from redis_adapter import init_redis_adapter
            redis_url = config.get_redis_url()
            print(f"üîç –û—Ç–ª–∞–¥–∫–∞ dialog_service: config.get_redis_url() = {redis_url}")
            await init_redis_adapter(redis_url)
            print(f"üî¥ –î–∏–∞–ª–æ–≥–∏: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis ({redis_url})")
        else:
            print("üêò –î–∏–∞–ª–æ–≥–∏: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        from config import Config
        config = Config()
        if config.is_redis_backend():
            from redis_adapter import close_redis_adapter
            await close_redis_adapter()
    
    async def save_dialog_message(self, from_user_id: str, to_user_id: str, text: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            from_user_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            to_user_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        from config import Config
        config = Config()
        if config.is_redis_backend():
            from redis_adapter import redis_dialog_adapter
            return await redis_dialog_adapter.save_dialog_message(from_user_id, to_user_id, text)
        else:
            from db import save_dialog_message
            return await save_dialog_message(from_user_id, to_user_id, text)
    
    async def get_dialog_messages(self, user_id1: str, user_id2: str) -> List[DialogMessageResponse]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
        """
        from config import Config
        config = Config()
        if config.is_redis_backend():
            from redis_adapter import redis_dialog_adapter
            return await redis_dialog_adapter.get_dialog_messages(
                user_id1, user_id2, limit=config.DIALOG_MESSAGES_LIMIT
            )
        else:
            from db import get_dialog_messages
            from models import DialogMessageResponse
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ PostgreSQL
            messages = await get_dialog_messages(user_id1, user_id2)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API
            response_messages = []
            for msg in messages:
                response_messages.append(
                    DialogMessageResponse(
                        from_user_id=str(msg.from_user_id),
                        to_user_id=str(msg.to_user_id),
                        text=msg.text,
                        created_at=msg.created_at
                    )
                )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            return response_messages[-config.DIALOG_MESSAGES_LIMIT:]
    
    async def get_dialog_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        from config import Config
        config = Config()
        if config.is_redis_backend():
            from redis_adapter import redis_dialog_adapter
            stats = await redis_dialog_adapter.get_dialog_stats()
            stats["backend"] = "Redis"
            return stats
        else:
            # –î–ª—è PostgreSQL –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            return {
                "backend": "PostgreSQL",
                "total_dialogs": "N/A",
                "total_messages": "N/A",
                "avg_messages_per_dialog": "N/A"
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_service = DialogService() 
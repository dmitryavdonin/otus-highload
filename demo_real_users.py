#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
—á–µ—Ä–µ–∑ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket.
"""

import asyncio
import json
import logging
import websockets
import aiohttp
import time
from datetime import datetime, date
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAIN_API_URL = "http://localhost:9000"  # –í–∞—à–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Docker
WEBSOCKET_URL = "ws://localhost:8001"   # WebSocket —Å–µ—Ä–≤–µ—Ä
HTTP_WS_URL = "http://localhost:8001"   # HTTP API WebSocket —Å–µ—Ä–≤–µ—Ä–∞

class DemoUser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, first_name: str, second_name: str, city: str, password: str):
        self.first_name = first_name
        self.second_name = second_name
        self.city = city
        self.password = password
        self.birthdate = "1990-01-01"
        self.biography = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.user_id = None
        self.token = None
        
        # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.websocket = None
        self.connected = False
        self.messages_received = []
        
    async def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
        try:
            user_data = {
                "first_name": self.first_name,
                "second_name": self.second_name,
                "birthdate": self.birthdate,
                "biography": self.biography,
                "city": self.city,
                "password": self.password
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{MAIN_API_URL}/user/register", json=user_data) as response:
                    if response.status == 200:
                        data = await response.json()
                        self.user_id = data["id"]
                        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: {self.user_id}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {self.first_name}: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {self.first_name}: {e}")
            return False
    
    async def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        try:
            login_data = {
                "id": self.user_id,
                "password": self.password
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{MAIN_API_URL}/user/login", json=login_data) as response:
                    if response.status == 200:
                        data = await response.json()
                        self.token = data["token"]
                        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.first_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {self.first_name}: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {self.first_name}: {e}")
            return False
    
    async def add_friend(self, friend_user_id: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ API"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            
            async with aiohttp.ClientSession() as session:
                async with session.put(f"{MAIN_API_URL}/friend/set/{friend_user_id}", headers=headers) as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ {self.first_name} –¥–æ–±–∞–≤–∏–ª –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {friend_user_id}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞ {self.first_name}: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞ {self.first_name}: {e}")
            return False
    
    async def create_post(self, text: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ API"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            post_data = {"text": text}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{MAIN_API_URL}/post/create", json=post_data, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        post_id = data["id"]
                        logger.info(f"üìù {self.first_name} —Å–æ–∑–¥–∞–ª –ø–æ—Å—Ç: '{text}' (ID: {post_id})")
                        return post_id
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ {self.first_name}: {response.status} - {error_text}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ {self.first_name}: {e}")
            return None
    
    async def connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            uri = f"{WEBSOCKET_URL}/ws/{self.user_id}?token={self.user_id}:test_signature"
            logger.info(f"üîå {self.first_name} –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket...")
            
            self.websocket = await websockets.connect(uri)
            self.connected = True
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = await self.websocket.recv()
            welcome_data = json.loads(welcome_msg)
            logger.info(f"‚úÖ {self.first_name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {welcome_data.get('data', {}).get('message', 'N/A')}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.first_name} –∫ WebSocket: {e}")
            return False
    
    async def disconnect_websocket(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.websocket and self.connected:
            await self.websocket.close()
            self.connected = False
            logger.info(f"üëã {self.first_name} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç WebSocket")
    
    async def listen_for_messages(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            while self.connected and self.websocket:
                try:
                    message = await asyncio.wait_for(self.websocket.recv(), timeout=1.0)
                    data = json.loads(message)
                    self.messages_received.append(data)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    msg_type = data.get('type')
                    msg_data = data.get('data', {})
                    
                    if msg_type == 'feed_update':
                        post_data = msg_data.get('post', {})
                        author = post_data.get('author_user_id', 'Unknown')
                        text = post_data.get('post_text', 'No text')
                        logger.info(f"üì¢ {self.first_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ –æ—Ç {author}: '{text}'")
                        
                    elif msg_type == 'friendship_update':
                        friend_id = msg_data.get('friend_user_id', 'Unknown')
                        action = msg_data.get('action', 'unknown')
                        logger.info(f"üë• {self.first_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—Ä—É–∂–±–µ: {action} —Å {friend_id}")
                        
                    elif msg_type == 'system':
                        message_text = msg_data.get('message', '')
                        if message_text not in ['pong', 'subscribed_to_feed', 'Connected successfully']:
                            logger.info(f"üîß {self.first_name} –ø–æ–ª—É—á–∏–ª —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
                    
                except asyncio.TimeoutError:
                    continue
                except websockets.exceptions.ConnectionClosed:
                    logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {self.first_name} –∑–∞–∫—Ä—ã—Ç–æ")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {self.first_name}: {e}")
                    break
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π {self.first_name}: {e}")

async def check_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ API
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{MAIN_API_URL}/docs") as response:
                if response.status == 200:
                    logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ API –¥–æ—Å—Ç—É–ø–Ω–æ")
                else:
                    logger.error(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{HTTP_WS_URL}/health") as response:
                if response.status == 200:
                    logger.info("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logger.error(f"‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False
    
    return True

async def trigger_post_notification(post_id: str, author_user_id: str, post_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç–µ —á–µ—Ä–µ–∑ WebSocket —Å–µ—Ä–≤–µ—Ä"""
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                "post_id": post_id,
                "author_user_id": author_user_id,
                "post_text": post_text
            }
            
            async with session.post(f"{HTTP_WS_URL}/test-post", params=params) as response:
                if response.status == 200:
                    logger.info(f"üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket —Å–µ—Ä–≤–µ—Ä")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    logger.info("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    if not await check_services():
        logger.error("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã:")
        logger.error("   - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç—É 9000")
        logger.error("   - WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8001")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    alice = DemoUser("–ê–ª–∏—Å–∞", "–ò–≤–∞–Ω–æ–≤–∞", "–ú–æ—Å–∫–≤–∞", "password123")
    bob = DemoUser("–ë–æ–±", "–ü–µ—Ç—Ä–æ–≤", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "password456")
    
    try:
        # –≠—Ç–∞–ø 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("\nüë§ –≠—Ç–∞–ø 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info("-" * 50)
        
        alice_registered = await alice.register()
        bob_registered = await bob.register()
        
        if not (alice_registered and bob_registered):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        await asyncio.sleep(1)
        
        # –≠—Ç–∞–ø 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("\nüîê –≠—Ç–∞–ø 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info("-" * 50)
        
        alice_logged = await alice.login()
        bob_logged = await bob.login()
        
        if not (alice_logged and bob_logged):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        await asyncio.sleep(1)
        
        # –≠—Ç–∞–ø 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è
        logger.info("\nüë• –≠—Ç–∞–ø 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è")
        logger.info("-" * 50)
        
        # –í–∑–∞–∏–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è
        await alice.add_friend(bob.user_id)
        await asyncio.sleep(1)
        await bob.add_friend(alice.user_id)
        await asyncio.sleep(2)
        
        # –≠—Ç–∞–ø 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
        logger.info("\nüîå –≠—Ç–∞–ø 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket")
        logger.info("-" * 50)
        
        alice_connected = await alice.connect_websocket()
        bob_connected = await bob.connect_websocket()
        
        if not (alice_connected and bob_connected):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ WebSocket")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        alice_listener = asyncio.create_task(alice.listen_for_messages())
        bob_listener = asyncio.create_task(bob.listen_for_messages())
        
        await asyncio.sleep(2)
        
        # –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.info("\nüìù –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        logger.info("-" * 50)
        
        # –ê–ª–∏—Å–∞ —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç
        post_text = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏! üéâ"
        post_id = await alice.create_post(post_text)
        if post_id:
            await trigger_post_notification(post_id, alice.user_id, post_text)
        await asyncio.sleep(3)
        
        # –ë–æ–± —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç
        post_text = "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è! –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ ‚òÄÔ∏è"
        post_id = await bob.create_post(post_text)
        if post_id:
            await trigger_post_notification(post_id, bob.user_id, post_text)
        await asyncio.sleep(3)
        
        # –ê–ª–∏—Å–∞ —Å–æ–∑–¥–∞–µ—Ç –µ—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç
        post_text = "–ò–∑—É—á–∞—é WebSocket —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üíª"
        post_id = await alice.create_post(post_text)
        if post_id:
            await trigger_post_notification(post_id, alice.user_id, post_text)
        await asyncio.sleep(3)
        
        # –ë–æ–± –æ—Ç–≤–µ—á–∞–µ—Ç
        post_text = "WebSocket –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä—É—Ç–æ! –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - —ç—Ç–æ –±—É–¥—É—â–µ–µ üöÄ"
        post_id = await bob.create_post(post_text)
        if post_id:
            await trigger_post_notification(post_id, bob.user_id, post_text)
        await asyncio.sleep(3)
        
        # –≠—Ç–∞–ø 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\nüìä –≠—Ç–∞–ø 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        logger.info("-" * 50)
        
        logger.info(f"üì¨ –ê–ª–∏—Å–∞ –ø–æ–ª—É—á–∏–ª–∞ {len(alice.messages_received)} WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info(f"üì¨ –ë–æ–± –ø–æ–ª—É—á–∏–ª {len(bob.messages_received)} WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        feed_updates_alice = [msg for msg in alice.messages_received if msg.get('type') == 'feed_update']
        feed_updates_bob = [msg for msg in bob.messages_received if msg.get('type') == 'feed_update']
        
        logger.info(f"üì¢ –ê–ª–∏—Å–∞ –ø–æ–ª—É—á–∏–ª–∞ {len(feed_updates_alice)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç–∞—Ö")
        logger.info(f"üì¢ –ë–æ–± –ø–æ–ª—É—á–∏–ª {len(feed_updates_bob)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç–∞—Ö")
        
        logger.info("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ:")
        logger.info("   - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API")
        logger.info("   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info("   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è")
        logger.info("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket")
        logger.info("   - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ API")
        logger.info("   - –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("\nüëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        if 'alice_listener' in locals():
            alice_listener.cancel()
        if 'bob_listener' in locals():
            bob_listener.cancel()
            
        await alice.disconnect_websocket()
        await bob.disconnect_websocket()
        
        logger.info("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import traceback
from typing import Optional
try:
    from pydantic_settings import BaseSettings
except ImportError:
    from pydantic import BaseSettings
from enum import Enum


class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    HOST: str = "0.0.0.0"
    PORT: int = 8001
    DEBUG: bool = False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL: str = "postgresql+asyncpg://user:password@localhost/social_network"
    DATABASE_SLAVE_URL: Optional[str] = None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
    REDIS_URL: Optional[str] = None
    REDIS_PASSWORD: Optional[str] = None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RabbitMQ
    RABBITMQ_URL: str = "amqp://guest:guest@localhost:5672/"
    RABBITMQ_EXCHANGE: str = "social_network"
    RABBITMQ_QUEUE_FEED_UPDATES: str = "feed_updates"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
    WS_MAX_CONNECTIONS_PER_USER: int = 3
    WS_HEARTBEAT_INTERVAL: int = 30  # —Å–µ–∫—É–Ω–¥—ã
    WS_CONNECTION_TIMEOUT: int = 300  # —Å–µ–∫—É–Ω–¥—ã
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π
    CELEBRITY_THRESHOLD: int = 1000  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏
    CELEBRITY_BATCH_SIZE: int = 100  # —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    CELEBRITY_BATCH_DELAY: float = 0.1  # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    JWT_SECRET_KEY: str = "your-secret-key-here"
    JWT_ALGORITHM: str = "HS256"
    JWT_EXPIRE_MINUTES: int = 30
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = "INFO"
    LOG_FORMAT: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
    CORS_ORIGINS: list = ["*"]  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    ENABLE_METRICS: bool = True
    METRICS_PORT: int = 8002
    
    model_config = {
        "env_file": ".env",
        "case_sensitive": True,
        "extra": "allow"  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    }


class DialogBackend(Enum):
    """–¢–∏–ø—ã –±—ç–∫–µ–Ω–¥–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    POSTGRESQL = "postgresql"
    REDIS = "redis"


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Config")
        print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        dialog_backend_env = os.getenv("DIALOG_BACKEND", "postgresql")
        print(f"üîç DIALOG_BACKEND –∏–∑ env: {dialog_backend_env}")
        self.DIALOG_BACKEND = DialogBackend(dialog_backend_env)
        
        # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.POSTGRES_HOST = os.getenv("POSTGRES_HOST", "localhost")
        self.POSTGRES_PORT = int(os.getenv("POSTGRES_PORT", "5432"))
        self.POSTGRES_DB = os.getenv("POSTGRES_DB", "social_network")
        self.POSTGRES_USER = os.getenv("POSTGRES_USER", "postgres")
        self.POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "password")
        
        # Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Docker Compose
        redis_host_env = os.getenv("REDIS_HOST", "localhost")
        redis_port_env = os.getenv("REDIS_PORT", "6379")
        redis_db_env = os.getenv("REDIS_DB", "0")
        
        print(f"üîç REDIS_HOST –∏–∑ env: {redis_host_env}")
        print(f"üîç REDIS_PORT –∏–∑ env: {redis_port_env}")
        print(f"üîç REDIS_DB –∏–∑ env: {redis_db_env}")
        
        self.REDIS_HOST = redis_host_env
        self.REDIS_PORT = int(redis_port_env)
        self.REDIS_DB = int(redis_db_env)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        self.DIALOG_MESSAGES_LIMIT = int(os.getenv("DIALOG_MESSAGES_LIMIT", "100"))
        self.DIALOG_TTL_DAYS = int(os.getenv("DIALOG_TTL_DAYS", "30"))
        
        print(f"üîç –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Config:")
        print(f"üîç self.REDIS_HOST = {self.REDIS_HOST}")
        print(f"üîç self.REDIS_PORT = {self.REDIS_PORT}")
        print(f"üîç self.REDIS_DB = {self.REDIS_DB}")
    
    def get_redis_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        print(f"üîç –û–¢–õ–ê–î–ö–ê: get_redis_url() –≤—ã–∑–≤–∞–Ω")
        print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_URL, –∑–∞—Ç–µ–º —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        redis_url = os.getenv("REDIS_URL")
        print(f"üîç REDIS_URL –∏–∑ env: {redis_url}")
        
        if redis_url:
            print(f"üîç –í–æ–∑–≤—Ä–∞—â–∞–µ–º REDIS_URL –∏–∑ env: {redis_url}")
            return redis_url
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        result_url = f"redis://{self.REDIS_HOST}:{self.REDIS_PORT}/{self.REDIS_DB}"
        print(f"üîç –°–æ—Å—Ç–∞–≤–ª—è–µ–º URL –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {result_url}")
        print(f"üîç self.REDIS_HOST = {self.REDIS_HOST}")
        print(f"üîç self.REDIS_PORT = {self.REDIS_PORT}")
        print(f"üîç self.REDIS_DB = {self.REDIS_DB}")
        
        return result_url
    
    def is_redis_backend(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ Redis –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        return self.DIALOG_BACKEND == DialogBackend.REDIS
    
    def is_postgresql_backend(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ PostgreSQL –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        return self.DIALOG_BACKEND == DialogBackend.POSTGRESQL


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ config")
print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
config = Config()


def get_database_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return settings.DATABASE_URL


def get_slave_database_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL slave –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return settings.DATABASE_SLAVE_URL or settings.DATABASE_URL


def get_redis_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL Redis"""
    print(f"üîç –û–¢–õ–ê–î–ö–ê: —Ñ—É–Ω–∫—Ü–∏—è get_redis_url() –≤—ã–∑–≤–∞–Ω–∞")
    print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
    return Config().get_redis_url()


def get_rabbitmq_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL RabbitMQ"""
    return settings.RABBITMQ_URL


def is_debug_mode() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"""
    return settings.DEBUG


def get_celebrity_settings() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π"""
    return {
        "threshold": settings.CELEBRITY_THRESHOLD,
        "batch_size": settings.CELEBRITY_BATCH_SIZE,
        "batch_delay": settings.CELEBRITY_BATCH_DELAY
    }


def get_websocket_settings() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket"""
    return {
        "max_connections_per_user": settings.WS_MAX_CONNECTIONS_PER_USER,
        "heartbeat_interval": settings.WS_HEARTBEAT_INTERVAL,
        "connection_timeout": settings.WS_CONNECTION_TIMEOUT
    }


def get_jwt_settings() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JWT"""
    return {
        "secret_key": settings.JWT_SECRET_KEY,
        "algorithm": settings.JWT_ALGORITHM,
        "expire_minutes": settings.JWT_EXPIRE_MINUTES
    } 
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import traceback
import uuid
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import redis.asyncio as redis
from models import DialogMessage, DialogMessageResponse


class RedisDialogAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ —á–µ—Ä–µ–∑ Redis
    """
    
    def __init__(self, redis_url: str):
        print(f"üîç –û–¢–õ–ê–î–ö–ê: RedisDialogAdapter.__init__ –≤—ã–∑–≤–∞–Ω —Å redis_url={redis_url}")
        print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
        
        self.redis_url = redis_url
        self.redis_client = redis.from_url(redis_url)
        
        print(f"üîç RedisDialogAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å URL: {redis_url}")
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: redis_dialog_adapter.redis_url = {self.redis_url}")
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        print(f"üîç –û–¢–õ–ê–î–ö–ê: RedisDialogAdapter.connect() –≤—ã–∑–≤–∞–Ω")
        print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
        print(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {self.redis_url}")
        
        try:
            await self.redis_client.ping()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {self.redis_url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self.redis_client:
            await self.redis_client.close()
    
    def _get_dialog_key(self, user_id1: str, user_id2: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–∏–∞–ª–æ–≥–∞. –í—Å–µ–≥–¥–∞ –≤ –æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–ª—é—á –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dialog:{smaller_id}:{larger_id}
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º ID –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π
        ids = sorted([user_id1, user_id2])
        return f"dialog:{ids[0]}:{ids[1]}"
    
    def _message_to_dict(self, message_id: str, from_user_id: str, to_user_id: str, 
                        text: str, created_at: datetime) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis"""
        return {
            "id": message_id,
            "from_user_id": from_user_id,
            "to_user_id": to_user_id,
            "text": text,
            "created_at": created_at.isoformat()
        }
    
    def _dict_to_message_response(self, message_dict: Dict) -> DialogMessageResponse:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–∑ Redis –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞"""
        return DialogMessageResponse(
            from_user_id=message_dict["from_user_id"],
            to_user_id=message_dict["to_user_id"],
            text=message_dict["text"],
            created_at=datetime.fromisoformat(message_dict["created_at"])
        )
    
    async def save_dialog_message(self, from_user_id: str, to_user_id: str, text: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis
        
        Args:
            from_user_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            to_user_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        message_id = str(uuid.uuid4())
        created_at = datetime.utcnow()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = self._message_to_dict(
            message_id, from_user_id, to_user_id, text, created_at
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–∏–∞–ª–æ–≥–∞
        dialog_key = self._get_dialog_key(from_user_id, to_user_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ score –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        timestamp_score = created_at.timestamp()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Sorted Set
        await self.redis_client.zadd(
            dialog_key, 
            {json.dumps(message_data): timestamp_score}
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 30 –¥–Ω–µ–π)
        await self.redis_client.expire(dialog_key, 30 * 24 * 60 * 60)
        
        return message_id
    
    async def get_dialog_messages(self, user_id1: str, user_id2: str, 
                                 limit: int = 100, offset: int = 0) -> List[DialogMessageResponse]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –∏–∑ Redis
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Sorted Set (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        # ZRANGE –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è score (–≤—Ä–µ–º–µ–Ω–∏)
        messages_data = await self.redis_client.zrange(
            dialog_key, 
            offset, 
            offset + limit - 1
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
        messages = []
        for message_json in messages_data:
            try:
                message_dict = json.loads(message_json)
                message_response = self._dict_to_message_response(message_dict)
                messages.append(message_response)
            except (json.JSONDecodeError, KeyError) as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        return messages
    
    async def get_dialog_messages_count(self, user_id1: str, user_id2: str) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        return await self.redis_client.zcard(dialog_key)
    
    async def get_recent_dialog_messages(self, user_id1: str, user_id2: str, 
                                       limit: int = 50) -> List[DialogMessageResponse]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∫–æ–Ω—Ü–∞ Sorted Set)
        messages_data = await self.redis_client.zrange(
            dialog_key, 
            -limit,  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ limit —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            -1       # –î–æ –∫–æ–Ω—Ü–∞
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã –æ—Ç–≤–µ—Ç–∞
        messages = []
        for message_json in messages_data:
            try:
                message_dict = json.loads(message_json)
                message_response = self._dict_to_message_response(message_dict)
                messages.append(message_response)
            except (json.JSONDecodeError, KeyError) as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        return messages
    
    async def delete_dialog(self, user_id1: str, user_id2: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            user_id1: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id2: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –±—ã–ª–æ
        """
        dialog_key = self._get_dialog_key(user_id1, user_id2)
        deleted_count = await self.redis_client.delete(dialog_key)
        return deleted_count > 0
    
    async def get_dialog_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º –≤ Redis
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        dialog_keys = await self.redis_client.keys("dialog:*")
        
        total_dialogs = len(dialog_keys)
        total_messages = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        for key in dialog_keys:
            count = await self.redis_client.zcard(key)
            total_messages += count
        
        return {
            "total_dialogs": total_dialogs,
            "total_messages": total_messages,
            "avg_messages_per_dialog": total_messages / total_dialogs if total_dialogs > 0 else 0
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
redis_dialog_adapter = None


async def init_redis_adapter(redis_url: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis-–∞–¥–∞–ø—Ç–µ—Ä–∞"""
    print(f"üîç –û–¢–õ–ê–î–ö–ê: init_redis_adapter() –≤—ã–∑–≤–∞–Ω —Å redis_url={redis_url}")
    print(f"üîç –°–¢–ï–ö –í–´–ó–û–í–û–í:\n{''.join(traceback.format_stack())}")
    
    global redis_dialog_adapter
    print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å URL: {redis_url}")
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π redis_url = {redis_url}")
    
    redis_dialog_adapter = RedisDialogAdapter(redis_url)
    await redis_dialog_adapter.connect()
    print(f"‚úÖ Redis –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å URL: {redis_url}")


async def close_redis_adapter():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis"""
    global redis_dialog_adapter
    if redis_dialog_adapter:
        await redis_dialog_adapter.disconnect() 
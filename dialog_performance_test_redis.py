#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import aiohttp
import time
import json
import random
import statistics
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import argparse
import sys
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:9000"
TEST_USERS_COUNT = 50
MESSAGES_PER_DIALOG = 20
DIALOGS_PER_USER = 5

class DialogPerformanceTester:
    def __init__(self, api_url: str = API_URL):
        self.api_url = api_url
        self.session = None
        self.users = []  # List of (user_id, token, name)
        self.metrics = {
            'user_registration': [],
            'user_login': [],
            'friend_addition': [],
            'message_send': [],
            'message_list': [],
        }
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def check_service_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with self.session.get(f"{self.api_url}/docs", timeout=5) as response:
                return response.status == 200
        except Exception as e:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def register_user(self, first_name: str, second_name: str, password: str) -> Tuple[str, float]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        data = {
            "first_name": first_name,
            "second_name": second_name,
            "birthdate": (datetime.now() - timedelta(days=365 * 25)).strftime("%Y-%m-%dT%H:%M:%S"),
            "biography": f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {second_name}",
            "city": "–ú–æ—Å–∫–≤–∞",
            "password": password
        }
        
        start_time = time.time()
        try:
            async with self.session.post(f"{self.api_url}/user/register", json=data) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    user_data = await response.json()
                    return user_data['id'], duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Registration failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Registration error after {duration:.3f}s: {e}")
    
    async def login_user(self, user_id: str, password: str) -> Tuple[str, float]:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        data = {
            "id": user_id,
            "password": password
        }
        
        start_time = time.time()
        try:
            async with self.session.post(f"{self.api_url}/user/login", json=data) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    token_data = await response.json()
                    return token_data['token'], duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Login failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Login error after {duration:.3f}s: {e}")
    
    async def add_friend(self, token: str, friend_id: str) -> float:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        headers = {"Authorization": f"Bearer {token}"}
        
        start_time = time.time()
        try:
            async with self.session.put(f"{self.api_url}/friend/set/{friend_id}", headers=headers) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    return duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Add friend failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Add friend error after {duration:.3f}s: {e}")
    
    async def send_message(self, token: str, recipient_id: str, text: str) -> float:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ UDF —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        headers = {"Authorization": f"Bearer {token}"}
        data = {"text": text}
        
        start_time = time.time()
        try:
            async with self.session.post(f"{self.api_url}/dialog/{recipient_id}/send_udf", 
                                       headers=headers, json=data) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    return duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Send message UDF failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Send message UDF error after {duration:.3f}s: {e}")
    
    async def get_messages(self, token: str, interlocutor_id: str) -> Tuple[List[Dict], float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ UDF —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        headers = {"Authorization": f"Bearer {token}"}
        
        start_time = time.time()
        try:
            async with self.session.get(f"{self.api_url}/dialog/{interlocutor_id}/list_udf", 
                                      headers=headers) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    messages = await response.json()
                    return messages, duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Get messages UDF failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Get messages UDF error after {duration:.3f}s: {e}")
    
    async def setup_test_users(self, count: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        tasks = []
        for i in range(count):
            first_name = f"RedisUser{i}"
            second_name = f"Test{i}"
            password = f"password{i}"
            tasks.append(self.register_and_login_user(first_name, second_name, password))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        successful_users = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {result}")
            else:
                user_id, token, reg_time, login_time = result
                successful_users.append((user_id, token, f"RedisUser{i} Test{i}"))
                self.metrics['user_registration'].append(reg_time)
                self.metrics['user_login'].append(login_time)
        
        self.users = successful_users
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def register_and_login_user(self, first_name: str, second_name: str, password: str) -> Tuple[str, str, float, float]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id, reg_time = await self.register_user(first_name, second_name, password)
        token, login_time = await self.login_user(user_id, password)
        return user_id, token, reg_time, login_time
    
    async def setup_friendships(self) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π...")
        
        tasks = []
        for i, (user_id, token, name) in enumerate(self.users):
            # –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –¥—Ä—É–∑—å—è —Å–ª–µ–¥—É—é—â–∏—Ö DIALOGS_PER_USER –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for j in range(1, min(DIALOGS_PER_USER + 1, len(self.users))):
                friend_idx = (i + j) % len(self.users)
                if friend_idx != i:
                    friend_id, _, _ = self.users[friend_idx]
                    tasks.append(self.add_friend(token, friend_id))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        successful_friendships = 0
        for result in results:
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: {result}")
            else:
                self.metrics['friend_addition'].append(result)
                successful_friendships += 1
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {successful_friendships} –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π")
    
    async def run_dialog_tests(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ UDF"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Redis UDF...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        send_tasks = []
        for i, (user_id, token, name) in enumerate(self.users):
            for j in range(1, min(DIALOGS_PER_USER + 1, len(self.users))):
                friend_idx = (i + j) % len(self.users)
                if friend_idx != i:
                    friend_id, _, _ = self.users[friend_idx]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
                    for msg_num in range(MESSAGES_PER_DIALOG):
                        message_text = f"Redis UDF —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_num + 1} –æ—Ç {name}"
                        send_tasks.append(self.send_message(token, friend_id, message_text))
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(send_tasks)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ UDF...")
        send_results = await asyncio.gather(*send_tasks, return_exceptions=True)
        
        successful_sends = 0
        for result in send_results:
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDF —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
            else:
                self.metrics['message_send'].append(result)
                successful_sends += 1
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_sends} UDF —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        read_tasks = []
        for i, (user_id, token, name) in enumerate(self.users):
            for j in range(1, min(DIALOGS_PER_USER + 1, len(self.users))):
                friend_idx = (i + j) % len(self.users)
                if friend_idx != i:
                    friend_id, _, _ = self.users[friend_idx]
                    read_tasks.append(self.get_messages(token, friend_id))
        
        print(f"üì• –ß—Ç–µ–Ω–∏–µ {len(read_tasks)} –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ UDF...")
        read_results = await asyncio.gather(*read_tasks, return_exceptions=True)
        
        successful_reads = 0
        total_messages_read = 0
        for result in read_results:
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è UDF —Å–æ–æ–±—â–µ–Ω–∏–π: {result}")
            else:
                messages, duration = result
                self.metrics['message_list'].append(duration)
                successful_reads += 1
                total_messages_read += len(messages)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {successful_reads} UDF –¥–∏–∞–ª–æ–≥–æ–≤ ({total_messages_read} —Å–æ–æ–±—â–µ–Ω–∏–π)")
    
    def print_metrics(self) -> None:
        """–í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*60)
        print("üìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (Redis UDF)")
        print("="*60)
        
        for operation, times in self.metrics.items():
            if times:
                avg_time = statistics.mean(times)
                median_time = statistics.median(times)
                min_time = min(times)
                max_time = max(times)
                p95_time = sorted(times)[int(len(times) * 0.95)] if len(times) > 1 else times[0]
                
                print(f"\n{operation.replace('_', ' ').title()}:")
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(times)}")
                print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}s")
                print(f"  –ú–µ–¥–∏–∞–Ω–∞: {median_time:.3f}s")
                print(f"  –ú–∏–Ω–∏–º—É–º: {min_time:.3f}s")
                print(f"  –ú–∞–∫—Å–∏–º—É–º: {max_time:.3f}s")
                print(f"  95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p95_time:.3f}s")
                print(f"  –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {1/avg_time:.1f}")
        
        print("\n" + "="*60)
    
    def save_metrics_to_file(self, filename: str = "lesson-07/dialog_metrics_redis_udf.json") -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–∞–π–ª"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É lesson-07, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("lesson-07", exist_ok=True)
        
        metrics_summary = {}
        for operation, times in self.metrics.items():
            if times:
                metrics_summary[operation] = {
                    'count': len(times),
                    'avg': statistics.mean(times),
                    'median': statistics.median(times),
                    'min': min(times),
                    'max': max(times),
                    'p95': sorted(times)[int(len(times) * 0.95)] if len(times) > 1 else times[0],
                    'ops_per_second': 1/statistics.mean(times),
                    'raw_times': times
                }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'database': 'Redis',
                'test_config': {
                    'users_count': len(self.users),
                    'messages_per_dialog': MESSAGES_PER_DIALOG,
                    'dialogs_per_user': DIALOGS_PER_USER
                },
                'metrics': metrics_summary
            }, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

async def main():
    global TEST_USERS_COUNT, MESSAGES_PER_DIALOG, DIALOGS_PER_USER
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (Redis UDF)')
    parser.add_argument('--users', type=int, default=TEST_USERS_COUNT, 
                       help=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {TEST_USERS_COUNT})')
    parser.add_argument('--messages', type=int, default=MESSAGES_PER_DIALOG,
                       help=f'–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–ª–æ–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {MESSAGES_PER_DIALOG})')
    parser.add_argument('--dialogs', type=int, default=DIALOGS_PER_USER,
                       help=f'–î–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DIALOGS_PER_USER})')
    parser.add_argument('--api-url', default=API_URL,
                       help=f'URL API —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {API_URL})')
    
    args = parser.parse_args()
    
    TEST_USERS_COUNT = args.users
    MESSAGES_PER_DIALOG = args.messages
    DIALOGS_PER_USER = args.dialogs
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –î–ò–ê–õ–û–ì–û–í (Redis UDF)")
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞:")
    print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {TEST_USERS_COUNT}")
    print(f"   - –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–ª–æ–≥: {MESSAGES_PER_DIALOG}")
    print(f"   - –î–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {DIALOGS_PER_USER}")
    print(f"   - API URL: {args.api_url}")
    print()
    
    async with DialogPerformanceTester(args.api_url) as tester:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        if not await tester.check_service_availability():
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
            sys.exit(1)
        
        print("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        try:
            # –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await tester.setup_test_users(TEST_USERS_COUNT)
            
            # –≠—Ç–∞–ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π
            await tester.setup_friendships()
            
            # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
            await tester.run_dialog_tests()
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            tester.print_metrics()
            tester.save_metrics_to_file()
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 
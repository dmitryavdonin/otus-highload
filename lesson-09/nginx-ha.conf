events {
    worker_connections 1024;
}

http {
    # DNS resolver для динамического определения upstream'ов
    resolver 127.0.0.11 valid=30s;
    
    # Upstream для балансировки приложений
    upstream social_network_backend {
        least_conn;  # Балансировка по наименьшему количеству подключений
        server app1:9000 max_fails=2 fail_timeout=10s;
        server app2:9000 max_fails=2 fail_timeout=10s;
        # Убираем app3 из upstream - он будет только backup через resolver
    }
    
    # Логирование с дополнительной информацией
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr="$upstream_addr" '
                    'upstream_status="$upstream_status" '
                    'upstream_response_time="$upstream_response_time" '
                    'request_time="$request_time"';
    
    # Дополнительный формат для отладки
    log_format debug '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent '
                     'upstream_addr="$upstream_addr" '
                     'upstream_status="$upstream_status" '
                     'upstream_response_time="$upstream_response_time" '
                     'request_time="$request_time" '
                     'upstream_connect_time="$upstream_connect_time" '
                     'upstream_header_time="$upstream_header_time" '
                     'request_body="$request_body" '
                     'args="$args"';
    
    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/debug.log debug;
    error_log /var/log/nginx/error.log debug;
    
    # Основной сервер
    server {
        listen 80;
        server_name localhost;
        
        # Максимальный размер тела запроса
        client_max_body_size 10M;
        
        # Увеличиваем таймауты для работы с приложением
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_404 off;
        proxy_next_upstream_tries 2;
        
        # Базовые заголовки для проксирования
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Health check для nginx
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Health check для приложений (проверяем каждый инстанс)
        location /health {
            proxy_pass http://social_network_backend/health;
        }
        
        # Статус nginx
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 10.0.0.0/8;
            deny all;
        }
        
        # Основные API endpoints
        location / {
            proxy_pass http://social_network_backend;
            
            # Буферизация ответов
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Дополнительное логирование для отладки 400 ошибок
            access_log /var/log/nginx/api_debug.log debug;
        }
        
        # Обработка ошибок
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
} 
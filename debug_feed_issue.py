#!/usr/bin/env python3
import asyncio
import re
import requests
from cache import RedisCache

API_BASE_URL = "http://localhost:9000"

async def main():
    # –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with open('lesson-06/test_report.html', 'r') as f:
        content = f.read()
    
    user_ids = re.findall(r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}', content)
    
    if len(user_ids) >= 2:
        user1_id = user_ids[0]  # –ê–ª–µ–∫—Å–µ–π
        user2_id = user_ids[1]  # –ú–∞—Ä–∏—è
        
        print(f"User1 (–ê–ª–µ–∫—Å–µ–π) ID: {user1_id}")
        print(f"User2 (–ú–∞—Ä–∏—è) ID: {user2_id}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
        cache = RedisCache()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–µ–Ω—Ç—ã
        user1_cached_feed = await cache.get_feed(user1_id, 0, 10)
        user2_cached_feed = await cache.get_feed(user2_id, 0, 10)
        
        print(f"\n=== –ö–≠–®–ò–†–û–í–ê–ù–ù–´–ï –õ–ï–ù–¢–´ ===")
        print(f"User1 cached feed: {len(user1_cached_feed)} posts")
        for i, post in enumerate(user1_cached_feed):
            author = post.get('author_user_id', 'unknown')
            text = post.get('text', 'no text')[:50]
            is_own = "üî¥ –°–í–û–ô –ü–û–°–¢" if author == user1_id else "‚úÖ –ø–æ—Å—Ç –¥—Ä—É–≥–∞"
            print(f"  {i+1}. {is_own} - author={author[:8]}... text='{text}...'")
        
        print(f"\nUser2 cached feed: {len(user2_cached_feed)} posts")
        for i, post in enumerate(user2_cached_feed):
            author = post.get('author_user_id', 'unknown')
            text = post.get('text', 'no text')[:50]
            is_own = "üî¥ –°–í–û–ô –ü–û–°–¢" if author == user2_id else "‚úÖ –ø–æ—Å—Ç –¥—Ä—É–≥–∞"
            print(f"  {i+1}. {is_own} - author={author[:8]}... text='{text}...'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API –Ω–∞–ø—Ä—è–º—É—é
        print(f"\n=== –ü–†–Ø–ú–´–ï –ó–ê–ü–†–û–°–´ –ö API ===")
        
        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ
        print("–î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω—ã —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        print("–ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –∫—ç—à –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        
        await cache.close()
    else:
        print("Not enough user IDs found")

if __name__ == "__main__":
    asyncio.run(main()) 
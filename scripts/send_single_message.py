#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import aiohttp
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:9000"

class SingleMessageSender:
    def __init__(self, api_url: str = API_URL):
        self.api_url = api_url
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def check_service_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with self.session.get(f"{self.api_url}/docs", timeout=5) as response:
                return response.status == 200
        except Exception as e:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def register_user(self, first_name: str, second_name: str, password: str) -> str:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = {
            "first_name": first_name,
            "second_name": second_name,
            "birthdate": (datetime.now() - timedelta(days=365 * 25)).strftime("%Y-%m-%dT%H:%M:%S"),
            "biography": f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {second_name}",
            "city": "–ú–æ—Å–∫–≤–∞",
            "password": password
        }
        
        try:
            async with self.session.post(f"{self.api_url}/user/register", json=data) as response:
                if response.status == 200:
                    user_data = await response.json()
                    return user_data['id']
                else:
                    error_text = await response.text()
                    raise Exception(f"Registration failed: {response.status} - {error_text}")
        except Exception as e:
            raise Exception(f"Registration error: {e}")
    
    async def login_user(self, user_id: str, password: str) -> str:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = {
            "id": user_id,
            "password": password
        }
        
        try:
            async with self.session.post(f"{self.api_url}/user/login", json=data) as response:
                if response.status == 200:
                    token_data = await response.json()
                    return token_data['token']
                else:
                    error_text = await response.text()
                    raise Exception(f"Login failed: {response.status} - {error_text}")
        except Exception as e:
            raise Exception(f"Login error: {e}")
    
    async def send_message(self, token: str, recipient_id: str, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        headers = {"Authorization": f"Bearer {token}"}
        data = {"text": text}
        
        try:
            async with self.session.post(f"{self.api_url}/dialog/{recipient_id}/send", 
                                       headers=headers, json=data) as response:
                if response.status == 200:
                    return True
                else:
                    error_text = await response.text()
                    raise Exception(f"Send message failed: {response.status} - {error_text}")
        except Exception as e:
            raise Exception(f"Send message error: {e}")
    
    async def get_messages(self, token: str, interlocutor_id: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞"""
        headers = {"Authorization": f"Bearer {token}"}
        
        try:
            async with self.session.get(f"{self.api_url}/dialog/{interlocutor_id}/list", 
                                      headers=headers) as response:
                if response.status == 200:
                    messages = await response.json()
                    return messages
                else:
                    error_text = await response.text()
                    raise Exception(f"Get messages failed: {response.status} - {error_text}")
        except Exception as e:
            raise Exception(f"Get messages error: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("=" * 50)
    
    async with SingleMessageSender() as sender:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞...")
        if not await sender.check_service_availability():
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        print("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è...")
            sender_id = await sender.register_user("Alice", "Sender", "password123")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {sender_id}")
            
            print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è...")
            recipient_id = await sender.register_user("Bob", "Recipient", "password456")
            print(f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {recipient_id}")
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
            print("\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è...")
            token = await sender.login_user(sender_id, "password123")
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            message_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Redis."
            success = await sender.send_message(token, recipient_id, message_text)
            
            if success:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                print("\nüì• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è...")
                messages = await sender.get_messages(token, recipient_id)
                
                if messages and len(messages) > 0:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ")
                    print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages[-1].get('text', 'N/A')}")
                else:
                    print("‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL, Redis –∏ Redis UDF
"""

import json
import sys
from pathlib import Path

def load_metrics(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ {file_path}")
        return None

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 1:
        return f"{seconds*1000:.1f}ms"
    else:
        return f"{seconds:.3f}s"

def calculate_improvement(baseline, value):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ baseline –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
    if baseline == 0:
        return 0
    improvement = ((baseline - value) / baseline) * 100
    return improvement

def compare_all_backends(postgres_data, redis_data, redis_udf_data):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –±—ç–∫–µ–Ω–¥–æ–≤"""
    
    print("üöÄ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 80)
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤: {postgres_data['test_config']}")
    print()
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    operations = [
        ('user_registration', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        ('user_login', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        ('friend_addition', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π'),
        ('message_send', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π'),
        ('message_list', '–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π')
    ]
    
    print("üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è):")
    print("-" * 80)
    print(f"{'–û–ø–µ—Ä–∞—Ü–∏—è':<25} {'PostgreSQL':<15} {'Redis':<15} {'Redis UDF':<15} {'–õ—É—á—à–∏–π':<10}")
    print("-" * 80)
    
    winners = {'PostgreSQL': 0, 'Redis': 0, 'Redis UDF': 0}
    
    for op_key, op_name in operations:
        if (op_key in postgres_data['metrics'] and 
            op_key in redis_data['metrics'] and 
            op_key in redis_udf_data['metrics']):
            
            pg_avg = postgres_data['metrics'][op_key]['avg']
            redis_avg = redis_data['metrics'][op_key]['avg']
            redis_udf_avg = redis_udf_data['metrics'][op_key]['avg']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            times = {'PostgreSQL': pg_avg, 'Redis': redis_avg, 'Redis UDF': redis_udf_avg}
            best_backend = min(times, key=times.get)
            winners[best_backend] += 1
            
            print(f"{op_name:<25} {format_time(pg_avg):<15} {format_time(redis_avg):<15} {format_time(redis_udf_avg):<15} {best_backend:<10}")
    
    print("-" * 80)
    print(f"{'–ò–¢–û–ì–û –ü–û–ë–ï–î:':<25} {winners['PostgreSQL']:<15} {winners['Redis']:<15} {winners['Redis UDF']:<15}")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("üìä –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
    print("=" * 80)
    
    for op_key, op_name in operations:
        if (op_key in postgres_data['metrics'] and 
            op_key in redis_data['metrics'] and 
            op_key in redis_udf_data['metrics']):
            
            pg_metrics = postgres_data['metrics'][op_key]
            redis_metrics = redis_data['metrics'][op_key]
            redis_udf_metrics = redis_udf_data['metrics'][op_key]
            
            print(f"\nüîß {op_name}:")
            print(f"   PostgreSQL: {format_time(pg_metrics['avg'])} | {pg_metrics['ops_per_second']:.1f} ops/sec")
            print(f"   Redis:      {format_time(redis_metrics['avg'])} | {redis_metrics['ops_per_second']:.1f} ops/sec")
            print(f"   Redis UDF:  {format_time(redis_udf_metrics['avg'])} | {redis_udf_metrics['ops_per_second']:.1f} ops/sec")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å PostgreSQL –∫–∞–∫ baseline
            redis_vs_pg = calculate_improvement(pg_metrics['avg'], redis_metrics['avg'])
            udf_vs_pg = calculate_improvement(pg_metrics['avg'], redis_udf_metrics['avg'])
            
            print(f"   üìà Redis vs PostgreSQL: {redis_vs_pg:+.1f}%")
            print(f"   üìà Redis UDF vs PostgreSQL: {udf_vs_pg:+.1f}%")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Redis UDF —Å –æ–±—ã—á–Ω—ã–º Redis
            udf_vs_redis = calculate_improvement(redis_metrics['avg'], redis_udf_metrics['avg'])
            print(f"   üìà Redis UDF vs Redis: {udf_vs_redis:+.1f}%")
    
    print("\n" + "=" * 80)
    print("üèÜ –û–ë–©–ò–ï –í–´–í–û–î–´:")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    overall_winner = max(winners, key=winners.get)
    print(f"ü•á –û–±—â–∏–π –ª–∏–¥–µ—Ä: {overall_winner} ({winners[overall_winner]} –ø–æ–±–µ–¥ –∏–∑ {len(operations)})")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
    
    if winners['PostgreSQL'] >= 3:
        print("‚úÖ PostgreSQL - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    if winners['Redis'] >= 2:
        print("‚úÖ Redis - —Ö–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º")
    
    if winners['Redis UDF'] >= 2:
        print("‚úÖ Redis UDF - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è custom –ª–æ–≥–∏–∫–∏")
        print("   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    else:
        print("‚ö†Ô∏è  Redis UDF - —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é Lua –∫–æ–¥–∞")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞—Ç—á–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    print("\nüîÑ –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î:")
    print("   ‚Ä¢ PostgreSQL - –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    print("   ‚Ä¢ Redis - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–µ—Å—Å–∏–∏")
    print("   ‚Ä¢ Redis UDF - —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    print("=" * 80)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –º–µ—Ç—Ä–∏–∫
    postgres_file = Path("lesson-07/dialog_metrics_postgresql.json")
    redis_file = Path("lesson-07/dialog_metrics_redis.json")
    redis_udf_file = Path("lesson-07/dialog_metrics_redis_udf.json")
    
    print("üöÄ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: PostgreSQL vs Redis vs Redis UDF")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    postgres_data = load_metrics(postgres_file)
    redis_data = load_metrics(redis_file)
    redis_udf_data = load_metrics(redis_udf_file)
    
    if not all([postgres_data, redis_data, redis_udf_data]):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        sys.exit(1)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    compare_all_backends(postgres_data, redis_data, redis_udf_data)

if __name__ == "__main__":
    main() 
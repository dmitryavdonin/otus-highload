#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
import os
import subprocess

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    
    # –ò—â–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    venv_paths = ['venv', '.venv', 'env', '.env']
    venv_path = None
    
    for path in venv_paths:
        if os.path.exists(path) and os.path.isdir(path):
            venv_path = path
            break
    
    if not venv_path:
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: ./start_service.sh")
        return False
    
    # –ü—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if os.name == 'nt':  # Windows
        python_path = os.path.join(venv_path, 'Scripts', 'python.exe')
    else:  # Unix/Linux/macOS
        python_path = os.path.join(venv_path, 'bin', 'python')
    
    if not os.path.exists(python_path):
        print(f"‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {python_path}")
        return False
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º: {venv_path}")
    os.execv(python_path, [python_path] + sys.argv)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__" and len(sys.argv) == 1:
    setup_environment()

import asyncio
import json
import websockets
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_websocket_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    server_url = "ws://localhost:8001"
    user_id = "test_user_123"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: user_id:signature
    token = f"{user_id}:test_signature"
    
    uri = f"{server_url}/ws/{user_id}?token={token}"
    
    try:
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {uri}")
        
        async with websockets.connect(uri) as websocket:
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É")
            
            # –û–∂–∏–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = await websocket.recv()
            welcome_data = json.loads(welcome_msg)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {welcome_data.get('data', {}).get('message')}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
            ping_message = {
                "type": "ping",
                "data": {}
            }
            await websocket.send(json.dumps(ping_message))
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping")
            
            # –û–∂–∏–¥–∞–µ–º pong
            pong_msg = await websocket.recv()
            pong_data = json.loads(pong_msg)
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {pong_data.get('data', {}).get('message')}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_message = {
                "type": "get_stats",
                "data": {}
            }
            await websocket.send(json.dumps(stats_message))
            logger.info("üì§ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            # –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            stats = None
            for _ in range(3):  # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ 3 —Å–æ–æ–±—â–µ–Ω–∏–π
                stats_msg = await websocket.recv()
                stats_data = json.loads(stats_msg)
                
                if stats_data.get('data', {}).get('message') == 'server_stats':
                    stats = stats_data.get('data', {}).get('stats', {})
                    break
            
            if stats is None:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞")
                return
            
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
            logger.info(f"   WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {stats.get('websocket', {}).get('total_connections', 0)}")
            logger.info(f"   Feed processor: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if stats.get('feed_processor', {}).get('is_running') else '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
            logger.info(f"   RabbitMQ: {'–ø–æ–¥–∫–ª—é—á–µ–Ω' if stats.get('rabbitmq', {}).get('connected') else '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            if stats.get('rabbitmq', {}).get('connected'):
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                logger.warning("‚ö†Ô∏è  RabbitMQ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–Ω—Ç—ã
            subscribe_message = {
                "type": "subscribe_feed",
                "data": {}
            }
            await websocket.send(json.dumps(subscribe_message))
            logger.info("üì§ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–Ω—Ç—ã")
            
            # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            subscribe_msg = await websocket.recv()
            subscribe_data = json.loads(subscribe_msg)
            logger.info(f"üì• –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {subscribe_data.get('data', {}).get('message')}")
            
            logger.info("‚úÖ –¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
    except websockets.exceptions.ConnectionClosed as e:
        logger.error(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        logger.error("   - –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        logger.error("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Redis")
    except websockets.exceptions.InvalidURI:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URI WebSocket —Å–µ—Ä–≤–µ—Ä–∞")
    except ConnectionRefusedError:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8001")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")


async def test_http_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP endpoints"""
    import aiohttp
    
    base_url = "http://localhost:8001"
    
    try:
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç health check
            async with session.get(f"{base_url}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info("‚úÖ Health check: OK")
                    logger.info(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                else:
                    logger.error(f"‚ùå Health check failed: {response.status}")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            async with session.get(f"{base_url}/stats") as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info("‚úÖ Stats endpoint: OK")
                    logger.info(f"   WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {data.get('websocket', {}).get('total_connections', 0)}")
                else:
                    logger.error(f"‚ùå Stats endpoint failed: {response.status}")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π
            async with session.get(f"{base_url}/celebrity-stats") as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info("‚úÖ Celebrity stats endpoint: OK")
                    logger.info(f"   –ü–æ—Ä–æ–≥ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏: {data.get('celebrity_threshold', 0)}")
                else:
                    logger.error(f"‚ùå Celebrity stats endpoint failed: {response.status}")
                    
    except aiohttp.ClientConnectorError:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ HTTP —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8001")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HTTP endpoints: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WebSocket —Å–µ—Ä–≤–µ—Ä–∞")
    logger.info("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP endpoints
    logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP endpoints...")
    await test_http_endpoints()
    
    logger.info("")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    await test_websocket_connection()
    
    logger.info("")
    logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main()) 
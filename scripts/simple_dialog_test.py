#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import aiohttp
import time
import json
from datetime import datetime, timedelta
from typing import List, Dict, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:9000"

class SimpleDialogTester:
    def __init__(self, api_url: str = API_URL):
        self.api_url = api_url
        self.session = None
        self.users = []  # List of (user_id, token, name)
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def check_service_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with self.session.get(f"{self.api_url}/docs", timeout=5) as response:
                return response.status == 200
        except Exception as e:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def register_user(self, first_name: str, second_name: str, password: str) -> Tuple[str, float]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        data = {
            "first_name": first_name,
            "second_name": second_name,
            "birthdate": (datetime.now() - timedelta(days=365 * 25)).strftime("%Y-%m-%dT%H:%M:%S"),
            "biography": f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {second_name}",
            "city": "–ú–æ—Å–∫–≤–∞",
            "password": password
        }
        
        start_time = time.time()
        try:
            async with self.session.post(f"{self.api_url}/user/register", json=data) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    user_data = await response.json()
                    return user_data['id'], duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Registration failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Registration error after {duration:.3f}s: {e}")
    
    async def login_user(self, user_id: str, password: str) -> Tuple[str, float]:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        data = {
            "id": user_id,
            "password": password
        }
        
        start_time = time.time()
        try:
            async with self.session.post(f"{self.api_url}/user/login", json=data) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    token_data = await response.json()
                    return token_data['token'], duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Login failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Login error after {duration:.3f}s: {e}")
    
    async def add_friend(self, token: str, friend_id: str) -> float:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        headers = {"Authorization": f"Bearer {token}"}
        
        start_time = time.time()
        try:
            async with self.session.put(f"{self.api_url}/friend/set/{friend_id}", headers=headers) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    return duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Add friend failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Add friend error after {duration:.3f}s: {e}")
    
    async def send_message(self, token: str, recipient_id: str, text: str) -> float:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        headers = {"Authorization": f"Bearer {token}"}
        data = {"text": text}
        
        start_time = time.time()
        try:
            async with self.session.post(f"{self.api_url}/dialog/{recipient_id}/send", 
                                       headers=headers, json=data) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    return duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Send message failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Send message error after {duration:.3f}s: {e}")
    
    async def get_messages(self, token: str, interlocutor_id: str) -> Tuple[List[Dict], float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        headers = {"Authorization": f"Bearer {token}"}
        
        start_time = time.time()
        try:
            async with self.session.get(f"{self.api_url}/dialog/{interlocutor_id}/list", 
                                      headers=headers) as response:
                duration = time.time() - start_time
                if response.status == 200:
                    messages = await response.json()
                    return messages, duration
                else:
                    error_text = await response.text()
                    raise Exception(f"Get messages failed: {response.status} - {error_text}")
        except Exception as e:
            duration = time.time() - start_time
            raise Exception(f"Get messages error after {duration:.3f}s: {e}")
    
    async def register_and_login_user(self, first_name: str, second_name: str, password: str) -> Tuple[str, str, float, float]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id, reg_time = await self.register_user(first_name, second_name, password)
        token, login_time = await self.login_user(user_id, password)
        return user_id, token, reg_time, login_time

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
    print("üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –î–ò–ê–õ–û–ì–û–í")
    print("=" * 50)
    print("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 2")
    print("   - –°–æ–æ–±—â–µ–Ω–∏–π: 1")
    print("   - –ë—ç–∫–µ–Ω–¥: Redis")
    print()
    
    async with SimpleDialogTester() as tester:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞...")
        if not await tester.check_service_availability():
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        print("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        try:
            # –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Alice...")
            alice_id, alice_token, alice_reg_time, alice_login_time = await tester.register_and_login_user(
                "Alice", "Sender", "password123"
            )
            print(f"‚úÖ Alice –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {alice_id}")
            print(f"   –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {alice_reg_time:.3f}s")
            print(f"   –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {alice_login_time:.3f}s")
            
            print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Bob...")
            bob_id, bob_token, bob_reg_time, bob_login_time = await tester.register_and_login_user(
                "Bob", "Recipient", "password456"
            )
            print(f"‚úÖ Bob –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {bob_id}")
            print(f"   –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {bob_reg_time:.3f}s")
            print(f"   –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {bob_login_time:.3f}s")
            
            # –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è
            print("\nü§ù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è...")
            
            print("Alice –¥–æ–±–∞–≤–ª—è–µ—Ç Bob –≤ –¥—Ä—É–∑—å—è...")
            friend_time1 = await tester.add_friend(alice_token, bob_id)
            print(f"‚úÖ Alice –¥–æ–±–∞–≤–∏–ª–∞ Bob –≤ –¥—Ä—É–∑—å—è –∑–∞ {friend_time1:.3f}s")
            
            print("Bob –¥–æ–±–∞–≤–ª—è–µ—Ç Alice –≤ –¥—Ä—É–∑—å—è...")
            friend_time2 = await tester.add_friend(bob_token, alice_id)
            print(f"‚úÖ Bob –¥–æ–±–∞–≤–∏–ª Alice –≤ –¥—Ä—É–∑—å—è –∑–∞ {friend_time2:.3f}s")
            
            # –≠—Ç–∞–ø 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            message_text = "–ü—Ä–∏–≤–µ—Ç, Bob! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Redis."
            send_time = await tester.send_message(alice_token, bob_id, message_text)
            print(f"‚úÖ Alice –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Bob –∑–∞ {send_time:.3f}s")
            print(f"   –¢–µ–∫—Å—Ç: {message_text}")
            
            # –≠—Ç–∞–ø 4: –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            print("\nüì• –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            print("Alice —á–∏—Ç–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å Bob...")
            alice_messages, alice_read_time = await tester.get_messages(alice_token, bob_id)
            print(f"‚úÖ Alice –ø—Ä–æ—á–∏—Ç–∞–ª–∞ –¥–∏–∞–ª–æ–≥ –∑–∞ {alice_read_time:.3f}s")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(alice_messages)}")
            
            print("Bob —á–∏—Ç–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å Alice...")
            bob_messages, bob_read_time = await tester.get_messages(bob_token, alice_id)
            print(f"‚úÖ Bob –ø—Ä–æ—á–∏—Ç–∞–ª –¥–∏–∞–ª–æ–≥ –∑–∞ {bob_read_time:.3f}s")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(bob_messages)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            if alice_messages and len(alice_messages) > 0:
                last_message = alice_messages[-1]
                print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ Alice:")
                print(f"   –û—Ç: {last_message.get('from_user_id', 'N/A')}")
                print(f"   –ö–æ–º—É: {last_message.get('to_user_id', 'N/A')}")
                print(f"   –¢–µ–∫—Å—Ç: {last_message.get('text', 'N/A')}")
                print(f"   –í—Ä–µ–º—è: {last_message.get('created_at', 'N/A')}")
            
            if bob_messages and len(bob_messages) > 0:
                last_message = bob_messages[-1]
                print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ Bob:")
                print(f"   –û—Ç: {last_message.get('from_user_id', 'N/A')}")
                print(f"   –ö–æ–º—É: {last_message.get('to_user_id', 'N/A')}")
                print(f"   –¢–µ–∫—Å—Ç: {last_message.get('text', 'N/A')}")
                print(f"   –í—Ä–µ–º—è: {last_message.get('created_at', 'N/A')}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print("=" * 50)
            print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            print(f"  Alice: {alice_reg_time:.3f}s")
            print(f"  Bob: {bob_reg_time:.3f}s")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ: {(alice_reg_time + bob_reg_time) / 2:.3f}s")
            
            print(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            print(f"  Alice: {alice_login_time:.3f}s")
            print(f"  Bob: {bob_login_time:.3f}s")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ: {(alice_login_time + bob_login_time) / 2:.3f}s")
            
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è:")
            print(f"  Alice -> Bob: {friend_time1:.3f}s")
            print(f"  Bob -> Alice: {friend_time2:.3f}s")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ: {(friend_time1 + friend_time2) / 2:.3f}s")
            
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            print(f"  Alice -> Bob: {send_time:.3f}s")
            
            print(f"–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:")
            print(f"  Alice: {alice_read_time:.3f}s")
            print(f"  Bob: {bob_read_time:.3f}s")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ: {(alice_read_time + bob_read_time) / 2:.3f}s")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main()) 